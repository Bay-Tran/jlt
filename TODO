- Some problems with taking magnitudes: if I have a mathvector of
complex numbers, then the magnitude should return a real, not complex,
number.  Also, it shouldn't be defined as x*x, as this is wrong for
complex numbers.  Need to call a magnitude function for the type.
Maybe also need a magnitude type.  Define with traits?

- Rename bcvector to vector, since I'm now using them fairly
  generically?  Namespaces will ensure no ambiguity arises.

- bcvector no longer needs to instantiate at() for gcc-3.x.

- Combine GramSchmidtOrthonorm and QRdecomp.  Really the same thing,
right?.  See if my decomposition is better.  Seems simpler.

- inline some functions in matrixutil.hpp?

- Rewrite matrixutil's to use vectors traits, as defined in rodent?

  Need to write matrix traits for that.  Specifically, the member
  function dim(), dim1(), dim2() for jlt::matrix<T> correspond to
  rows() and columns() of blitz::Array<T,2>.  Move rodent's traits to jlt.

- Precompile some stuff if possible. [not possible for templates?]

+ Integrate as part of jlt lib:

	Rodent:
	io.hpp		->	containerio.hpp, or maybe stlio or something.
	exceptions.hpp	->	Contains a bunch of useful #defines.

	LinAlg:
	Math.hpp	->	math.hpp
	MathVec.hpp	->	mathvector.hpp
	Matutil.hpp	->	
	Mat.hpp		->	matrix.hpp
	MathMat.hpp	->	mathmatrix.hpp
	FixMat.hpp	->	fixmatrix.hpp
	FixVec.hpp	->	fixvector.hpp

+ Remove LinAlg from rodent completely.

+ Make CVS image of jlt.

+ Drop .hpp? [nope]

+ Phase out Vec.  The only drawback to doing this is that I then lose
optional bounds checking unless I do something clever:

+ Maybe bcvector : public vector, which overwrites [] and adds bounds
checking.
