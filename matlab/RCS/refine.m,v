head	1.3;
access;
symbols;
locks; strict;
comment	@// @;


1.3
date	2008.03.02.19.54.22;	author jeanluc;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.10.10.36.37;	author jeanluc;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.06.13.14.39;	author jeanluc;	state Exp;
branches;
next	;


desc
@Increase resolution of an array using FFT.
@


1.3
log
@Renamed fk1 to fk.
@
text
@function fp = refine(f,N)
%REFINE   Increase resolution of an array using FFT.
%   REFINE(F,N) returns F inflated to length N by taking the FFT of
%   the data, padding with zeros, then inverting using the IFFT.
%
%   See also REFINE2.

% $Id: refine.m,v 1.2 2005/12/10 10:36:37 jeanluc Exp $

N0 = length(f);

if N < N0
  error('No downsampling in refine')
end

kmin0 = floor(-(N0-1)/2);
kmax0 = floor( (N0-1)/2);
kmin = floor(-(N-1)/2);
kmax = floor( (N-1)/2);
c = -kmin+1;
c0 = -kmin0+1;
k0 = [kmin0:kmax0];

fk0 = fftshift(fft(f));
fk = zeros(N,1);

fk(c + k0) = fk0(c0 + k0);

fp = (N/N0)*ifft(ifftshift(fk),'symmetric');
@


1.2
log
@- Rescale by N/N0.
- Works for N, N0 even.
@
text
@d5 2
d8 1
a8 1
% $Id: refine.m,v 1.1 2005/08/06 13:14:39 jeanluc Exp $
d11 5
d25 1
a25 1
fk1 = zeros(N,1);
d27 1
a27 1
fk1(c + k0) = fk0(c0 + k0);
d29 1
a29 1
fp = (N/N0)*ifft(ifftshift(fk1),'symmetric');
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
% $Id$
d9 7
a15 2
n0 = (N0-1)/2;
n = (N-1)/2;
d20 1
a20 1
fk1(n+1 + [-n0:n0]) = fk0(n0+1 + [-n0:n0]);
d22 1
a22 1
fp = ifft(ifftshift(fk1),'symmetric');
@
